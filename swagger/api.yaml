openapi: 3.0.0

info:
  title: argus
  description: My blog
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: local server
  - url: https://argus.champon.xyz
    description: domain

paths:
  /api/find/article/pickup:
    get:
      summary: Return pick up articles.
      responses:
        '200':
          description: A JSON of articles array.
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                required:
                  - articles
  /api/find/article/sortedId:
    get:
      summary: Return an aritlce by selected sortedId and next, previous article.
      parameters:
        - name: sortedId
          in: query
          required: true
          description: Article sorted id.
          schema:
            type: number
      responses:
        '200':
          description: A JSON of article.
          content:
            application/json:
              schema:
                type: object
                properties:
                  article:
                    $ref: '#/components/schemas/Article'
                  next:
                    $ref: '#/components/schemas/Article'
                  prev:
                    $ref: '#/components/schemas/Article'
                required:
                  - article
                  - next
                  - prev
  /api/find/article/list:
    get:
      summary: Return a list of articles.
      parameters:
        - name: p
          in: query
          required: false
          description: Page of view.
          schema:
            type: number
      responses:
        '200':
          description: A JSON array of articles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  maxPage:
                    type: number
                required:
                  - articles
                  - maxPage
  /api/find/article/list/title:
    get:
      summary: Return a list of articles by title.
      parameters:
        - name: title
          in: query
          required: true
          description: A title of articles.
          schema:
            type: string
        - name: p
          in: query
          required: false
          description: Page of view.
          schema:
            type: number
      responses:
        '200':
          description: A JSON array of articles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  maxPage:
                    type: number
                required:
                  - articles
                  - maxPage
  /api/find/article/list/create-date:
    get:
      summary: Return a list of articles by title.
      parameters:
        - name: createDate
          in: query
          required: true
          description: A created date of articles.
          schema:
            type: string
        - name: p
          in: query
          required: false
          description: Page of view.
          schema:
            type: number
      responses:
        '200':
          description: A JSON array of articles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  maxPage:
                    type: number
                required:
                  - articles
                  - maxPage
  /api/find/article/list/category:
    get:
      summary: Return a list of articles by title.
      parameters:
        - name: category
          in: query
          required: true
          description: A category name which an articles has.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: A JSON array of articles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  maxPage:
                    type: number
                required:
                  - articles
                  - maxPage
  /api/find/category/list:
    get:
      summary: Return a list of categories.
      responses:
        '200':
          description: A JSON array of cateogries.
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                required:
                  - categories

  /api/verify/token:
    post:
      summary: Verify token.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean
        '400':
          description: no authorization header.
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/find/article/id:
    get:
      summary: Return an aritlce by selected id.
      parameters:
        - name: id
          in: query
          required: true
          description: Article id.
          schema:
            type: string
      responses:
        '200':
          description: A JSON of article.
          content:
            application/json:
              schema:
                type: object
                properties:
                  article:
                    $ref: '#/components/schemas/Article'
                required:
                  - article

  /api/private/find/article/list/all:
    get:
      summary: Return a list of articles (including private)
      security:
        - BearerAuth: []
      parameters:
        - name: p
          in: query
          required: false
          description: Page of view.
          schema:
            type: number
      responses:
        '200':
          description: A JSON array of articles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  maxPage:
                    type: number
                required:
                  - articles
                  - maxPage
        '400':
          description: no authorization header
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/find/draft/list:
    get:
      summary: Return a list of drafts.
      security:
        - BearerAuth: []
      parameters:
        - name: p
          in: query
          required: false
          description: Page of view.
          schema:
            type: number
      responses:
        '200':
          description: A JSON array of drafts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  drafts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Draft'
                  maxPage:
                    type: number
                required:
                  - drafts
                  - maxPage
        '400':
          description: no authorization header
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/find/draft/id:
    get:
      summary: Return a list of drafts.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          description: Draft id.
          schema:
            type: string
      responses:
        '200':
          description: A JSON of draft.
          content:
            application/json:
              schema:
                type: object
                properties:
                  draft:
                    $ref: '#/components/schemas/Draft'
                required:
                  - draft
        '400':
          description: no authorization header
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/find/image/list:
    get:
      summary: Return a list of image names.
      security:
        - BearerAuth: []
      parameters:
        - name: p
          in: query
          required: false
          description: Page of view.
          schema:
            type: number
      responses:
        '200':
          description: A string array of image names and whether there is next page.
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      type: string
                  next:
                    type: boolean
                required:
                  - images
                  - next
        '400':
          description: no authorization header
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/register/article:
    post:
      summary: Register new article.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  $ref: '#/components/schemas/RequestArticle'
                htmlContents:
                  type: string
                mdContents:
                  type: string
              required:
                - article
                - htmlContents
                - mdContents
      responses:
        '200':
          description: Success
        '400':
          description: no authorization header
        '500':
          description: Failed
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/register/image:
    post:
      summary: Register new image.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: string
                  format: binary
      responses:
        '200':
          description: Success
        '400':
          description: no authorization header
        '500':
          description: Failed
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/update/article:
    put:
      summary: Update article.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  $ref: '#/components/schemas/RequestArticle'
                htmlContents:
                  type: string
                mdContents:
                  type: string
              required:
                - article
                - htmlContents
                - mdContents
      responses:
        '200':
          description: Success
        '400':
          description: no authorization header
        '500':
          description: Failed
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/update/article/object:
    put:
      summary: Update article only object (not include content).
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  $ref: '#/components/schemas/RequestArticle'
              required:
                - article
      responses:
        '200':
          description: Success
        '400':
          description: no authorization header
        '500':
          description: Failed
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/draft/article:
    post:
      summary: Draft article.
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  $ref: '#/components/schemas/RequestDraft'
                mdContents:
                  type: string
              required:
                - article
                - mdContents
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  contentHash:
                    type: string
                  imageHash:
                    type: string
                required:
                  - id
                  - contentHash
                  - imageHash
        '400':
          description: no authorization header
        '500':
          description: Failed
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/delete/image:
    delete:
      summary: Delete images.
      security:
        - BearerAuth: []
      parameters:
        - name: imageNames
          in: query
          required: true
          description: Image names.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Success
        '400':
          description: no authorization header
        '500':
          description: Failed
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

  /api/private/delete/draft:
    delete:
      summary: Delete draft.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          description: Draft id.
          schema:
            type: string
        - name: contentHash
          in: query
          required: true
          description: Draft content hash.
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: no authorization header
        '500':
          description: Failed
        '403':
          description: expired or firbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  verify:
                    type: boolean

components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: string
        sortedId:
          type: number
        title:
          type: string
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        createDate:
          type: string
        updateDate:
          type: string
        contentHash:
          type: string
        imageHash:
          type: string
        isPrivate:
          type: boolean
      required:
        - id
        - sortedId
        - title
        - categories
        - createDate
        - updateDate
        - contentHash
        - imageHash
        - isPrivate
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        articleNum:
          type: number
      required:
        - id
        - name
        - articleNum
    Draft:
      type: object
      properties:
        id:
          type: string
        sortedId:
          type: number
        title:
          type: string
        categories:
          type: string
        updateDate:
          type: string
        contentHash:
          type: string
        imageHash:
          type: string
      required:
        - id
        - sortedId
        - title
        - categories
        - updateDate
        - contentHash
        - imageHash
    RequestArticle:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        categories:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
            required:
              - id
              - name
        contentHash:
          type: string
        imageHash:
          type: string
        isPrivate:
          type: boolean
      required:
        - id
        - title
        - categories
        - contentHash
        - imageHash
        - isPrivate
    RequestDraft:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        categories:
          type: string
        contentHash:
          type: string
        imageHash:
          type: string
      required:
        - id
        - title
        - categories
        - contentHash
        - imageHash
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT