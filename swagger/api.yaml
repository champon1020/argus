openapi: 3.0.0

info:
  title: argus
  description: My blog
  version: 1.0.0

paths:
  /api/find/article/list:
    get:
      summary: Return a list of articles.
      responses:
        '200':
          description: A JSON array of articles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                required:
                  - articles
  /api/find/article/list/title:
    get:
      summary: Return a list of articles by title.
      parameters:
        - name: title
          in: path
          required: true
          description: A title of articles.
          schema:
            type: number
      responses:
        '200':
          description: A JSON array of articles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                required:
                  - articles
  /api/find/article/list/create-date:
    get:
      summary: Return a list of articles by title.
      parameters:
        - name: create_date
          in: path
          required: true
          description: A created date of articles.
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of articles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                required:
                  - articles
  /api/find/article/list/category:
    get:
      summary: Return a list of articles by title.
      parameters:
        - name: category
          in: path
          required: true
          description: A category name which an articles has.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: A JSON array of articles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                required:
                  - articles
  /api/find/category/list:
    get:
      summary: Return a list of categories.
      responses:
        '200':
          description: A JSON array of cateogries.
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                required:
                  - categories
  /api/find/draft/list:
    get:
      summary: Return a list of drafts.
      parameters:
        - name: p
          in: path
          required: true
          description: page of the view (offset)
          schema:
            type: number
      responses:
        '200':
          description: A JSON array of drafts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  drafts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Draft'
                required:
                  - drafts
  /api/find/image/list:
    get:
      summary: Return a list of image names.
      responses:
        '200':
          description: A string array of image names and whether there is next page.
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      type: string
                  next:
                    type: boolean
                required:
                  - images
                  - next

  /api/register/article:
    post:
      summary: Register new article.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  $ref: '#/components/schemas/RequestArticle'
                contents:
                  type: string
              required:
                - article
                - contents
      responses:
        '200':
          description: Success
        '503':
          description: Failed
  /api/register/image:
    post:
      summary: Register new image.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: string
                  format: binary
      responses:
        '200':
          description: Success
        '503':
          description: Failed

  /api/update/article:
    put:
      summary: Update article.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  $ref: '#/components/schemas/RequestArticle'
                contents:
                  type: string
              required:
                - article
                - contents
      responses:
        '200':
          description: Success
        '503':
          description: Failed
  /api/draft/article:
    post:
      summary: Draft article.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  $ref: '#/components/schemas/RequestDraft'
                contents:
                  type: string
              required:
                - article
                - contents
      responses:
        '200':
          description: Success
        '500':
          description: Failed

  /api/delete/image:
    delete:
      summary: Delete image.
      parameters:
        - name: imgName
          in: path
          required: true
          description: page of the view (offset)
          schema:
            type: string
      responses:
        '200':
          description: Success
        '500':
          description: Failed

components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        createDate:
          type: string
        updateDate:
          type: string
        contentHash:
          type: string
        imageHash:
          type: string
        private:
          type: boolean
      required:
        - id
        - title
        - categories
        - createDate
        - updateDate
        - contentHash
        - imageHash
        - private
    Category:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        articleNum:
          type: number
      required:
        - id
        - name
        - articleNum
    Draft:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        categories:
          type: string
        updateDate:
          type: string
        contentHash:
          type: string
        imageHash:
          type: string
      required:
        - id
        - title
        - categories
        - contentHash
        - imageHash
    RequestArticle:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        categories:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              name:
                type: string
            required:
              - id
              - name
        contentHash:
          type: string
        imageHash:
          type: string
        private:
          type: boolean
      required:
        - id
        - title
        - categories
        - contentHash
        - imageHash
        - private
    RequestDraft:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        categories:
          type: string
        contentHash:
          type: string
        imageHash:
          type: string
      required:
        - id
        - title
        - categories
        - contentHash
        - imageHash